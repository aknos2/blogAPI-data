// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  username     String
  password     String
  refreshToken String? // optional token for long-lived sessions
  role         Role      @default(USER)
  comments     Comment[]
  posts        Post[]
  Like         Like[]
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String? // HTML from TinyMCE (optional if using PostPage)
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes     Int      @default(0)

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  thumbnail   PostImage? @relation("ThumbnailImage", fields: [thumbnailId], references: [id])
  thumbnailId String?    @unique

  images   PostImage[] @relation("PostImages")
  postPage PostPage[]

  categories Category[]
  comments   Comment[]
  Like       Like[]
}

model PostPage {
  id      String @id @default(uuid())
  pageNum Int
  content String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@unique([postId, pageNum])
}

model PostImage {
  id        String   @id @default(uuid())
  url       String
  caption   String?
  altText   String?
  createdAt DateTime @default(now())

  post   Post   @relation("PostImages", fields: [postId], references: [id])
  postId String

  // Back-reference for thumbnail relation
  thumbnailFor Post? @relation("ThumbnailImage")

  isInGallery Boolean @default(true)
}

model Like {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
}

model Category {
  id    String @id @default(uuid())
  name  String
  posts Post[]
}

enum Role {
  USER
  AUTHOR
  ADMIN
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
